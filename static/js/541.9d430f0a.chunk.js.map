{"version":3,"file":"static/js/541.9d430f0a.chunk.js","mappings":"yNA4CA,UAxCa,WACX,IAAQA,GAAaC,EAAAA,EAAAA,MAAbD,SACR,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KAcA,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAK,mCAAG,WAAMR,GAAN,gGAEaS,EAAAA,GAAqBT,GAFlC,OAEJU,EAFI,OAGVN,EAAUM,GAHA,sDAKVJ,GAAS,GACH,IAAIK,MAAJ,MANI,yDAAH,sDASXH,EAAMR,EACP,GAAE,CAACA,KAGF,gCACGG,EAAOS,OAAS,IACf,wBACGT,EAAOU,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,aAAcC,EAAvB,EAAuBA,UAAvB,OACV,2BACE,uBAAIF,KACJ,gBACEG,IAAG,0CAAqCF,GACxCG,IAAKJ,EACLK,MAAM,KACNC,OAAO,SAET,uCAAeJ,OARRF,EADC,MAcfT,IAAS,kDAGf,C,uKCzCKgB,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,+BAGlB,IAAMC,EAAgB,mCAAG,sGAGpBD,EAAAA,EAAAA,IAAA,sCAAyCD,IAHrB,uBAEpBG,EAFoB,EAE5BC,KAAQD,QAFoB,kBAIvBA,EAAQX,KAAI,kBAAoB,CAAEa,MAAtB,EAAGA,MAA0BC,GAA7B,EAAUA,GAAV,KAJW,2CAAH,qDAOhBC,EAAY,mCAAG,WAAMD,GAAN,mGACHL,EAAAA,EAAAA,IAAA,iBACXK,EADW,oBACGN,EADH,oBADG,uBAClBI,EADkB,EAClBA,KAGAC,EAAuDD,EAAvDC,MAAOG,EAAgDJ,EAAhDI,SAAUC,EAAsCL,EAAtCK,YAAaC,EAAyBN,EAAzBM,aAAcC,EAAWP,EAAXO,OAJ1B,kBAKnB,CAAEN,MAAAA,EAAOG,SAAAA,EAAUC,YAAAA,EAAaC,aAAAA,EAAcC,OAAAA,IAL3B,2CAAH,sDAQZC,EAAgB,mCAAG,WAAMN,GAAN,yFACPL,EAAAA,EAAAA,IAAA,iBACXK,EADW,4BACWN,EADX,oBADO,uBACtBI,EADsB,EACtBA,KADsB,kBAIvBA,EAAKS,KAAKrB,KAAI,kBAAwC,CAC3DC,KADmB,EAAGA,KAEtBC,aAFmB,EAASA,aAG5BC,UAHmB,EAAuBA,UAAvB,KAJS,2CAAH,sDAWhBmB,EAAiB,mCAAG,WAAMR,GAAN,yFACRL,EAAAA,EAAAA,IAAA,iBACXK,EADW,4BACWN,EADX,2BADQ,uBACvBI,EADuB,EACvBA,KADuB,kBAIxBA,EAAKD,QAAQX,KAAI,kBAA0B,CAAEuB,OAA5B,EAAGA,OAAiCC,QAApC,EAAWA,QAAX,KAJO,2CAAH,qD","sources":["components/Cast/Cast.js","services/api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as API from '../../services/api';\n\nconst Cast = () => {\n  const { moviesId } = useParams();\n  const [actors, setActors] = useState([]);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    const fetch = async moviesId => {\n      try {\n        const response = await API.getMovieByActors(moviesId);\n        setActors(response);\n      } catch (error) {\n        setError(true);\n        throw new Error(error);\n      }\n    };\n    fetch(moviesId);\n  }, [moviesId]);\n\n  return (\n    <>\n      {actors.length > 0 && (\n        <ul>\n          {actors.map(({ name, profile_path, character }) => (\n            <li key={name}>\n              <p>{name}</p>\n              <img\n                src={`https://image.tmdb.org/t/p/w500/${profile_path}`}\n                alt={name}\n                width=\"70\"\n                height=\"100\"\n              />\n              <p>Character: {character}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n      {error && <div>Please reload page</div>}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\nconst API_KEY = 'e5b8bd1b82d4f5b68280cf1e2b92e5f6';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n// axios.defaults.headers.common['Authorization'] = API_KEY;\n\nexport const getTrendingFilms = async () => {\n  const {\n    data: { results },\n  } = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  return results.map(({ title, id }) => ({ title, id }));\n};\n\nexport const getMovieById = async id => {\n  const { data } = await axios.get(\n    `/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  const { title, overview, poster_path, vote_average, genres } = data;\n  return { title, overview, poster_path, vote_average, genres };\n};\n\nexport const getMovieByActors = async id => {\n  const { data } = await axios.get(\n    `/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return data.cast.map(({ name, profile_path, character }) => ({\n    name,\n    profile_path,\n    character,\n  }));\n};\n\nexport const getMovieByReviews = async id => {\n  const { data } = await axios.get(\n    `/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return data.results.map(({ author, content }) => ({ author, content }));\n};\n"],"names":["moviesId","useParams","useState","actors","setActors","error","setError","useEffect","fetch","API","response","Error","length","map","name","profile_path","character","src","alt","width","height","API_KEY","axios","getTrendingFilms","results","data","title","id","getMovieById","overview","poster_path","vote_average","genres","getMovieByActors","cast","getMovieByReviews","author","content"],"sourceRoot":""}