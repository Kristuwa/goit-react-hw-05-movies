{"version":3,"file":"static/js/423.daf155b4.chunk.js","mappings":"kQAGaA,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,iX,SCAVE,EAAW,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,SAC7B,OACE,UAACL,EAAD,CAAYI,GAAIA,EAAhB,WACE,SAAC,MAAD,CAAaE,KAAK,OACjBD,IAGN,E,2BCRYE,EAAYN,EAAAA,GAAAA,IAAH,4GC8EtB,EA1EsB,WAAO,IAAD,IAClBO,GAAaC,EAAAA,EAAAA,MAAbD,SACR,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,MACAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAK,mCAAG,WAAMR,GAAN,uFAEVM,GAAa,GAFH,SAGaG,EAAAA,EAAiBT,GAH9B,OAGJU,EAHI,OAIVN,EAASM,GACTJ,GAAa,GALH,sDAOJ,IAAIK,MAAJ,MAPI,yDAAH,sDAUXH,EAAMR,EACP,GAAE,CAACA,IAEJ,IACMY,EAAY,qBADDC,EAAAA,EAAAA,MACaC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IACrCC,EAAuDb,EAAvDa,MAAOC,EAAgDd,EAAhDc,SAAUC,EAAsCf,EAAtCe,YAAaC,EAAyBhB,EAAzBgB,aAAcC,EAAWjB,EAAXiB,OAC9CC,EAAG,0CAAsCH,GACzCI,EAA2C,GAAnCC,OAAM,OAACJ,QAAD,IAACA,OAAD,EAACA,EAAcK,QAAQ,IAE3C,OACE,6BACE,SAAC7B,EAAD,CAAUC,GAAIgB,EAAd,4BACCP,GACC,yCAEA,iCACE,UAACN,EAAD,YACE,0BACE,gBAAK0B,IAAKJ,EAAKK,IAAKV,EAAOW,MAAM,MAAMC,OAAO,WAEhD,4BACE,wBAAKZ,KACL,yCACc,4BAAOM,EAAP,OAAsB,QAEpC,sCACA,uBAAIL,KACJ,mCAEY,OAAXG,GACC,+BACGA,QADH,IACGA,OADH,EACGA,EAAQS,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACd,OAAO,wBAAgBA,GAAPA,EACjB,OAGH,iDAIN,mDACA,2BACE,yBACE,SAAC,KAAD,CAAMlC,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,8BAMR,SAAC,EAAAmC,SAAD,CAAUC,UAAU,gDAApB,UACE,SAAC,KAAD,QAIP,C,qHC7EKC,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,+BAGlB,IAAMC,EAAgB,mCAAG,+GAELD,EAAAA,EAAAA,IAAA,sCAAyCD,IAFpC,uBAEpBG,EAFoB,EAEpBA,KAFoB,kBAIrBA,EAAKC,SAJgB,sCAMtB,IAAI1B,MAAJ,MANsB,yDAAH,qDAUhB2B,EAAY,mCAAG,WAAMC,GAAN,yFACHL,EAAAA,EAAAA,IAAA,iBACXK,EADW,oBACGN,EADH,oBADG,uBAClBG,EADkB,EAClBA,KADkB,kBAInBA,GAJmB,2CAAH,qD","sources":["components/BackLink/BackLink.styled.js","components/BackLink/BackLink.js","pages/MoviesDetails.styled.js","pages/MoviesDetails.js","services/api.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const StyledLink = styled(Link)`\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n  padding: 8px;\n  color: black;\n  background-color: #a8a8a8;\n  text-decoration: none;\n  font-weight: 500;\n  font-size: 12px;\n  text-transform: uppercase;\n  margin-bottom: 10px;\n  border-radius: 10px;\n\n  :hover {\n    background-color: orangered;\n    color: #ffffff;\n  }\n`;\n","import { HiArrowLeft } from 'react-icons/hi';\nimport { StyledLink } from './BackLink.styled';\n\nexport const BackLink = ({ to, children }) => {\n  return (\n    <StyledLink to={to}>\n      <HiArrowLeft size=\"16\" />\n      {children}\n    </StyledLink>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  gap: 20px;\n  justify-content: centre;\n  align-items: centre;\n`;\n","import { BackLink } from 'components/BackLink/BackLink';\nimport { useEffect, useState, Suspense } from 'react';\nimport { useLocation, useParams, Link, Outlet } from 'react-router-dom';\nimport * as API from '../services/api';\nimport { Container } from './MoviesDetails.styled';\n\nconst MoviesDetails = () => {\n  const { moviesId } = useParams();\n  const [movie, setMovie] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    const fetch = async moviesId => {\n      try {\n        setIsLoading(true);\n        const response = await API.getMovieById(moviesId);\n        setMovie(response);\n        setIsLoading(false);\n      } catch (error) {\n        throw new Error(error);\n      }\n    };\n    fetch(moviesId);\n  }, [moviesId]);\n\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n  const { title, overview, poster_path, vote_average, genres } = movie;\n  const img = `https://image.tmdb.org/t/p/w500/${poster_path}`;\n  const score = Number(vote_average?.toFixed(0)) * 10;\n\n  return (\n    <main>\n      <BackLink to={backLinkHref}>Back to movies</BackLink>\n      {isLoading ? (\n        <div>Loading...</div>\n      ) : (\n        <>\n          <Container>\n            <div>\n              <img src={img} alt={title} width=\"500\" height=\"800\" />\n            </div>\n            <div>\n              <h2>{title}</h2>\n              <p>\n                User Score: <span>{score}%</span>{' '}\n              </p>\n              <b>Overview:</b>\n              <p>{overview}</p>\n              <b>Genres:</b>\n\n              {genres !== null ? (\n                <ul>\n                  {genres?.map(({ name }) => {\n                    return <li key={name}>{name}</li>;\n                  })}\n                </ul>\n              ) : (\n                <p>No information</p>\n              )}\n            </div>\n          </Container>\n          <p>Additional information</p>\n          <ul>\n            <li>\n              <Link to=\"cast\">Cast</Link>\n            </li>\n            <li>\n              <Link to=\"reviews\">Reviews</Link>\n            </li>\n          </ul>\n        </>\n      )}\n\n      <Suspense fallback={<div>Loading subpage...</div>}>\n        <Outlet />\n      </Suspense>\n    </main>\n  );\n};\n\nexport default MoviesDetails;\n","import axios from 'axios';\nconst API_KEY = 'e5b8bd1b82d4f5b68280cf1e2b92e5f6';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n// axios.defaults.headers.common['Authorization'] = API_KEY;\n\nexport const getTrendingFilms = async () => {\n  try {\n    const { data } = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n\n    return data.results;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport const getMovieById = async id => {\n  const { data } = await axios.get(\n    `/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n"],"names":["StyledLink","styled","Link","BackLink","to","children","size","Container","moviesId","useParams","useState","movie","setMovie","isLoading","setIsLoading","useEffect","fetch","API","response","Error","backLinkHref","useLocation","state","from","title","overview","poster_path","vote_average","genres","img","score","Number","toFixed","src","alt","width","height","map","name","Suspense","fallback","API_KEY","axios","getTrendingFilms","data","results","getMovieById","id"],"sourceRoot":""}